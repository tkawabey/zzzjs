#include "precompile.h"


#ifdef _MSC_VER
	#pragma warning(disable:4800)
#endif 



#include "wx/wxprec.h"

#ifndef WX_PRECOMP
    #include "wx/wx.h"
#endif

#include "js/engine/mng_inst.h"
#include "js/common/conf.h"
#include "js/gui/event/jsevent.h"
#include "js/gui/event/bookctrlevt.h"
#include "js/gui/event/notify.h"
#include "js/gui/misc/size.h"


using namespace zzzJs;
using namespace zzzJs::gui;

/***
 * <module>gui</module>
 * <file>event/spinevt</file>
 * <class name="wxBookCtrlEvent" prototype="@wxNotifyEvent">
 *  This event class is used for the events generated by @wxSpinButton 
 *  and @wxSpinCtrl.
 * </class>
 */
WXJS_INIT_CLASS(BookCtrlEvent, "BookCtrlEvent", 0)

/***
 * <properties>
 *  <property name="position" type=WXJS_TYPE_NUMBER>
 *   Get/Set the current spin button or control value.
 *  </property>
 * </properties>
 */
WXJS_BEGIN_PROPERTY_MAP(BookCtrlEvent)
	WXJS_PROPERTY(P_SELECTION, "selection")
	WXJS_PROPERTY(P_OLD_SELECTION, "oldSelection")
WXJS_END_PROPERTY_MAP()

bool BookCtrlEvent::GetProperty(PrivBookCtrlEvent *p,
                                  JSContext *cx, 
                                  JSObject *obj, 
                                  int id, 
                                  JS::MutableHandle<JS::Value>& vp)
{
	wxBookCtrlEvent *event = (wxBookCtrlEvent*) p->GetEvent();

	switch ( id )
	{
	case P_SELECTION:
		ToJSVal(cx, vp, event->GetSelection());
		break;
	case P_OLD_SELECTION:
		ToJSVal(cx, vp, event->GetOldSelection());
		break;
	}
	return true;
}

bool BookCtrlEvent::SetProperty(PrivBookCtrlEvent *p,
                                  JSContext *cx, 
                                  JSObject *obj, 
                                  int id, 
                                  JS::MutableHandle<JS::Value>& vp)
{
	wxBookCtrlEvent *event = (wxBookCtrlEvent*) p->GetEvent();

	switch ( id )
	{
	case P_SELECTION:
		{
			int pos = 0;
			if ( FromJS(cx, vp, pos) )
				event->SetSelection(pos);
			break;
		}
	case P_OLD_SELECTION:
		{
			int pos = 0;
			if ( FromJS(cx, vp, pos) )
				event->SetOldSelection(pos);
			break;
		}
	}
	return true;
}

	
WXJS_BEGIN_GET_SET_STR_PROP(PrivBookCtrlEvent, BookCtrlEvent)
{
	NotifyEvent::SetStringProperty((PrivNotifyEvent*)p, cx,  obj, propertyName, vp);
	return true;
}
ZZZJS_END_GET_SET_STR_PROP